#! usr/bin/python
from __future__ import print_function
import sys
import multiprocessing as mp
from time import time

from disvis import DisVis, PDB 
from disvis.rotations import proportional_orientations, quat_to_rotmat

def run_disvis_instance(queue, r, l, rotmat, weights, n):
    dv = DisVis()
    dv.receptor = r
    dv.ligand = l
    dv.rotations = rotmat
    dv.weights = weights
    ais, complexes = dv.search()
    ais.tofile('yep_{:d}'.format(n))
    queue.put(complexes)

if __name__=='__main__':

    pdb1 = PDB.fromfile(sys.argv[1])
    pdb2 = PDB.fromfile(sys.argv[2])
    angle = float(sys.argv[3])
    nproc = int(sys.argv[4])

    q, w, a = proportional_orientations(angle)
    rotmat = quat_to_rotmat(q, invert=True)
    print('Number of rotations: ', rotmat.shape[0])

    time0 = time()
    max_cpu  = mp.cpu_count()
    p = {}
    nrot = rotmat.shape[0]
    queue = mp.Queue()
    for n in range(min(nproc, max_cpu)):


        nr = nrot//min(nproc, max_cpu)

        p[n] = {}
        rots = rotmat
        p[n]['process'] = mp.Process(target=run_disvis_instance, args=(queue, pdb1.duplicate(), pdb2.duplicate(), rotmat[nr*n:nr*(n+1)].copy(), w[nr*n:nr*(n+1)].copy(), n))
        p[n]['process'].start()

    for n in range(min(nproc, max_cpu)):
        p[n]['process'].join()

    #print(queue.get())
    for n in range(min(nproc, max_cpu)):
        complexes = queue.get()
        print(complexes)

    print('Total time: ', time() - time0)
