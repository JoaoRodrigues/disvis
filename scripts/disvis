#! usr/bin/python
from __future__ import print_function, division, absolute_import
import os
import errno
import sys
from time import time
import multiprocessing as mp
from argparse import ArgumentParser
import logging

import numpy as np
from disvis import DisVis, PDB, Volume
from disvis.rotations import proportional_orientations, quat_to_rotmat


def parse_args():

    p = ArgumentParser()

    p.add_argument('receptor', type=file,
            help='PDB-file containing fixed chain.')

    p.add_argument('ligand', type=file,
            help='PDB-file containing scanning chain.')

    p.add_argument('restraints', type=file,
            help='File containing the distance restraints')

    p.add_argument('-a', '--angle', dest='angle', type=float, default=15,
            help='Rotational sampling density in degrees. Default is 15 degrees.')

    p.add_argument('-vs', '--voxelspacing', dest='voxelspacing',
            type=float, default=1,
            help='Voxel spacing of search grid in angstrom. Default is 1A.')

    p.add_argument('-ir', '--interaction-radius',
            dest='interaction_radius', type=float, default=3.0,
            help='Radius of the interaction space for each atom in angstrom. '
                 'Atoms are thus considered interacting if the distance is '
                 'larger than the vdW radius and shorther than or equal to '
                 'vdW + interaction_radius. Default is 3A.')

    p.add_argument('-cv', '--max_clash',
            dest='max_clash', type=float, default=200,
            help='Maximum allowed volume of clashes. Increasing this '
                 'number results in more allowed complexes. '
                 'Default is 200 A^3.')

    p.add_argument('-iv', '--min-interaction',
            dest='min_interaction', type=float, default=300,
            help='Minimal required interaction volume for a '
                 'conformation to be considered a '
                 'complex. Increasing this number results in a '
                 'stricter counting of complexes. '
                 'Default is 300 A^3.')

    p.add_argument('-d', '--directory', dest='directory', type=str, default='.',
            help='Directory where results are written to. '
                 'Default is current directory.')

    p.add_argument('-p', '--nproc', dest='nproc', type=int, default=1,
            help='Number of processors used during search.')

    p.add_argument('-g', '--gpu', dest='gpu', action='store_true',
            help='Use GPU-acceleration for search. If not available '
                 'the CPU-version will be used with the given number '
                 'of processors.')

    return p.parse_args()


def parse_restraints(fid, pdb1, pdb2):

    dist_restraints = []

    for line in fid:
        # ignore comments and empty lines
        line = line.strip()
        if line.startswith('#') or not line:
            continue
        chain1, resi1, name1, chain2, resi2, name2, mindis, maxdis = line.split()
        pdb1_sel = pdb1.select('chain', chain1).select('resi', int(resi1)).select('name', name1).duplicate()
        pdb2_sel = pdb2.select('chain', chain2).select('resi', int(resi2)).select('name', name2).duplicate()

        if pdb1_sel.natoms > 0 and pdb2_sel.natoms > 0:
            dist_restraints.append([pdb1_sel, pdb2_sel, float(mindis), float(maxdis)])
        else:
            raise ValueError("A restraint selection was not found in line:\n{:s}".format(str(line)))

    fid.close()

    return dist_restraints


def run_disvis_instance(queue, receptor, ligand, distance_restraints, rotmat, weights, n, args):

    dv = DisVis()

    dv.receptor = receptor
    dv.ligand = ligand
    dv.distance_restraints = distance_restraints
    dv.rotations = rotmat
    dv.weights = weights

    dv.voxelspacing = args.voxelspacing
    dv.interaction_radius = args.interaction_radius
    dv.max_clash = args.max_clash
    dv.min_interaction = args.min_interaction

    ais, complexes, violations = dv.search()

    ais.tofile(os.path.join(args.directory, 'accessible_interaction_space_{:d}.mrc'.format(n)))

    np.save(os.path.join(args.directory, 'violations_{:d}.npy'.format(n)), violations)
    queue.put(complexes)


def mp_cpu_disvis(receptor, ligand, rotmat, weights, distance_restraints, args):

    # multi-threaded CPU version
    try:
        max_cpu  = mp.cpu_count()
        jobs = min(max_cpu, args.nproc)
    except NotImplementedError:
        jobs = args.nproc
    # in case more processes are requiested than the number
    # of rotations sampled
    nrot = rotmat.shape[0]
    if jobs > nrot:
        jobs = nrot
    nrot_per_job = nrot//jobs
    write('Number of processors used: {:d}'.format(jobs))
    write('Number of rotations per job: {:d}'.format(nrot_per_job))

    write('Creating jobs')

    queue = mp.Queue()
    processes = []
    for n in range(jobs):

        init_rot = n * nrot_per_job
        end_rot = (n + 1) * nrot_per_job
        if n == (jobs - 1):
            end_rot = None

        sub_rotmat = rotmat[init_rot: end_rot]
        sub_weights = weights[init_rot: end_rot]

        process = mp.Process(target=run_disvis_instance,
            args=(queue, receptor, ligand, distance_restraints, sub_rotmat, sub_weights, n, args))

        processes.append(process)

    write('Starting jobs')
    for n in range(jobs):
        processes[n].start()
    write('Waiting for jobs to finish')

    for n in range(jobs):
        processes[n].join()
    write('Searching done. Combining results')

    accessible_complexes = np.asarray(queue.get(), dtype=np.float64)
    accessible_interaction_space = Volume.fromfile(os.path.join(args.directory, 'accessible_interaction_space_0.mrc'))
    violations = np.load(os.path.join(args.directory, 'violations_0.npy'))
    for n in range(1, jobs):
        accessible_complexes += np.asarray(queue.get(), dtype=np.float64)
        np.maximum(accessible_interaction_space.array,
                Volume.fromfile(os.path.join(args.directory, 'accessible_interaction_space_{:d}.mrc'.format(n))).array,
                accessible_interaction_space.array)
        violations += np.load(os.path.join(args.directory, 'violations_{:d}.npy'.format(n)))

    write('Cleaning')
    for n in range(jobs):
        os.remove(os.path.join(args.directory, 'accessible_interaction_space_{:d}.mrc'.format(n)))
        os.remove(os.path.join(args.directory, 'violations_{:d}.npy'.format(n)))

    return accessible_interaction_space, accessible_complexes, violations


def run_disvis(queue, receptor, ligand, rotmat, weights, distance_restraints, args):

    dv = DisVis()

    dv.receptor = receptor
    dv.ligand = ligand
    dv.distance_restraints = distance_restraints
    dv.rotations = rotmat
    dv.weights = weights

    dv.voxelspacing = args.voxelspacing
    dv.interaction_radius = args.interaction_radius
    dv.max_clash = args.max_clash
    dv.min_interaction = args.min_interaction
    dv.queue = queue

    return dv.search()


def write(line):
    if sys.stdout.isatty():
        print(line)
    logging.info(line)


def mkdir_p(path):
    try:
        os.makedirs(path)
    except OSError as exc: # Python >2.5
        if exc.errno == errno.EEXIST and os.path.isdir(path):
            pass
        else:
            raise


def main():

    args = parse_args()

    mkdir_p(args.directory)

    logging.basicConfig(filename=os.path.join(args.directory, 'disvis.log'),
            level=logging.INFO, format='%(asctime)s %(message)s')

    time0 = time()

    write('Reading fixed model from: {:s}'.format(args.receptor.name))
    receptor = PDB.fromfile(args.receptor)
    write('Reading scanning model from: {:s}'.format(args.ligand.name))
    ligand = PDB.fromfile(args.ligand)

    write('Reading in rotations.')
    q, weights, a = proportional_orientations(args.angle)
    rotmat = quat_to_rotmat(q)
    write('Requested rotational sampling density: {:.2f}'.format(args.angle))
    write('Real rotational sampling density: {:.2f}'.format(a))
    write('Number of rotations: {:d}'.format(rotmat.shape[0]))

    write('Reading in restraints from file: {:s}'.format(args.restraints.name))
    distance_restraints = parse_restraints(args.restraints, receptor, ligand)
    write('Number of distance restraints: {:d}'.format(len(distance_restraints)))

    write('Voxel spacing set to: {:.2f}'.format(args.voxelspacing))
    write('Interaction radius set to: {:.2f}'.format(args.interaction_radius))
    write('Minimum required interaction volume: {:.2f}'.format(args.min_interaction))
    write('Maximum allowed volume of clashes: {:.2f}'.format(args.max_clash))

    queue = None
    if args.gpu:
        from disvis.helpers import get_queue
        queue = get_queue()

    if queue is None:
        if args.gpu:
            write('No GPU queue was found. Falling back on CPU implementation.')
        # CPU-version
        if args.nproc > 1:
            accessible_interaction_space, accessible_complexes, violations = \
                    mp_cpu_disvis(receptor, ligand, rotmat, weights, distance_restraints, args)
        else:
            accessible_interaction_space, accessible_complexes, violations = \
                    run_disvis(queue, receptor, ligand, rotmat, weights, distance_restraints, args)
    else:
        # GPU-version
        write('Using GPU accelerated search.')
        accessible_interaction_space, accessible_complexes, violations = \
                 run_disvis(queue, receptor, ligand, rotmat, weights, distance_restraints, args)

    # write out accessible interaction space
    f_accessible_interaction_space = os.path.join(args.directory, 'accessible_interaction_space.mrc')
    write('Writing accessible interaction space to: {:s}'.format(f_accessible_interaction_space))
    accessible_interaction_space.tofile(f_accessible_interaction_space)

    # write out accessible complexes
    norm = sum(accessible_complexes)
    digits = len(str(int(norm))) + 1
    cum_complexes = np.cumsum(np.asarray(accessible_complexes)[::-1])[::-1]
    with open(os.path.join(args.directory, 'accessible_complexes.out'), 'w') as f_accessible_complexes:
        write('Writing number of accessible complexes to: {:s}'.format(f_accessible_complexes.name))
        header = '# consistent restraints | accessible complexes |' +\
                 'relative | cumulative accessible complexes | relative\n'
        f_accessible_complexes.write(header)
        for n, acc in enumerate(accessible_complexes):
            f_accessible_complexes.write('{0:3d} {2:{1}d} {3:8.6f} {4:{1}d} {5:8.6f}\n'\
                    .format(n, digits, int(acc), acc/norm,
                    int(cum_complexes[n]), cum_complexes[n]/norm))

    # writing out violations
    with open(os.path.join(args.directory, 'violations.out'), 'w') as f_viol:
        write('Writing violations to file: {:s}'.format(f_viol.name))
        num_violations = violations.sum(axis=1)
        nrestraints = num_violations.shape[0]
        header = ('# row represents the number of consistent restraints\n'
                  '# column represents how often that restraint is violated\n')
        f_viol.write(header)
        header = ('   ' + '{:8d}'*nrestraints + '\n').format(*range(1, nrestraints + 1))
        f_viol.write(header)
        for n, line in enumerate(violations):
            f_viol.write('{:<2d} '.format(n+1))
            for word in line:
                if num_violations[n] > 0:
                    percentage_violated = word/accessible_complexes[n+1]
                else:
                    percentage_violated = 0
                f_viol.write('{:8.4f}'.format(percentage_violated))
            f_viol.write('\n')

    # time indication
    seconds = int(round(time() - time0))
    m, s = divmod(seconds, 60)
    write('Total time passed: {:d}m {:2d}s'.format(m, s))

if __name__=='__main__':
    main()
